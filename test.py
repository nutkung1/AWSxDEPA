import boto3


class AWSBedrockTool:
    def __init__(self, model_id):
        self.model_id = model_id
        self.client = boto3.client(
            "bedrock-runtime"
        )  # Initialize the Bedrock runtime client

    def generate_text(self, prompt):
        response = self.client.invoke_model(
            modelId=self.model_id,
            body=prompt,
            accept="application/json",
            contentType="application/json",
        )
        result = response["body"].read().decode("utf-8")
        return result


from crewai import Agent


class AWSBedrockAgent(Agent):
    def __init__(self, model_id, role, goal, verbose=True):
        # Initialize with the AWSBedrockTool for text generation
        self.aws_tool = AWSBedrockTool(model_id)
        super().__init__(role=role, goal=goal, verbose=verbose)

    def generate_report(self, topic):
        prompt = f"Generate a detailed report on {topic}."
        return self.aws_tool.generate_text(prompt)


from crewai import Task


class GenerateReportTask(Task):
    def __init__(self, description, expected_output, agent):
        super().__init__(
            description=description, expected_output=expected_output, agent=agent
        )

    def execute(self, inputs):
        topic = inputs.get("topic")
        report = self.agent.generate_report(topic)
        print(f"Generated Report for {topic}: {report}")
        return report


from crewai import Crew, Process

# Initialize the agent with a Bedrock model ID
bedrock_agent = AWSBedrockAgent(
    model_id="amazon.titan-text-premier-v1:0",  # Replace with your Bedrock model ID
    role="Researcher",
    goal="Generate comprehensive reports using AWS Bedrock.",
)

# Define the task for generating a report
report_task = GenerateReportTask(
    description="Use AWS Bedrock to generate a detailed report on the given topic.",
    expected_output="A detailed report generated by AWS Bedrock.",
    agent=bedrock_agent,
)

# Form the crew with a single agent and task
crew = Crew(agents=[bedrock_agent], tasks=[report_task], process=Process.sequential)

# Kick off the crew and provide input
result = crew.kickoff(inputs={"topic": "AI in Healthcare"})
print(result)
